commonLabels:
  app: sonarqube
  env: production
  team: devops

usePasswordFiles: true

image:
  registry: docker.io
  repository: bitnami/sonarqube
  tag: 25.8.0-debian-12-r2
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

sonarqubeUsername: sonarqube

# sonarqubePassword: "hailey-whiny-panther-tesla"
existingSecret: sonarqube-secret
sonarqubeEmail: engineering@edusuc.net
minHeapSize: 1024m
maxHeapSize: 2048m
jvmOpts: ""
jvmCeOpts: ""

startTimeout: 300

extraEnvVars: []

extraEnvVarsCM: ""

extraEnvVarsSecret: ""

replicaCount: 2

containerPorts:
  http: 9000
  elastic: 9001

livenessProbe:
  enabled: true
  initialDelaySeconds: 100
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 100
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1

resources: {}
  # requests:
  #   cpu: 1
  #   memory: 512Mi
  # limits:
  #   cpu: 2
  #   memory: 1024Mi

podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001

containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

automountServiceAccountToken: false
nodeSelector: {}
updateStrategy:
  type: RollingUpdate
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
pdb:
  create: true
  minAvailable: "1"
  maxUnavailable: ""

service:
  type: LoadBalancer
  ports:
    http: 80
    elastic: 9001
  extraPorts: []
networkPolicy:             #### wil need provision one external
  enabled: false

ingress:
  enabled: false

persistence:
  enabled: true
  storageClass: "default"
  accessModes:
    - ReadWriteOnce
  size: 3Gi
  existingClaim: "sonarqube"
rbac:
  create: false
serviceAccount:
  create: true
  name: "sonarqube"
  automountServiceAccountToken: false
  annotations: {}

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPU: 50
  targetMemory: 50

metrics:
  jmx:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 1.4.0-debian-12-r0
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    containerPorts:
      metrics: 10445
    resourcesPreset: "none"
    resources: {}
    livenessProbe:
      enabled: true
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    whitelistObjectNames:
      - java.lang:*
      - SonarQube:*
      - Tomcat:*
    configuration: |-
      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:10443/jmxrmi
      lowercaseOutputName: true
      lowercaseOutputLabelNames: true
      ssl: false
      {{- if .Values.metrics.jmx.whitelistObjectNames }}
      whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
      {{- end }}
      rules:
      - pattern: java.lang<type=(.+), name=(.+)><(.+)>(\w+)
        name: java_lang_$1_$4_$3_$2
      - pattern: java.lang<type=(.+), name=(.+)><>(\w+)
        name: java_lang_$1_$3_$2
      - pattern: java.lang<type=(.*)>
      - pattern: SonarQube<name=(.+)><>(\w+)
        name: sonarqube_$1_$2
      - pattern: Tomcat<type=(.+), name=(.+)><>(\w+)
        name: tomcat_$1_$3_$2
    service:
      ports:
        metrics: 10443
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.jmx.service.ports.metrics }}"
        prometheus.io/path: "/"
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    metricRelabelings: []
    relabelings: []
    selector: {}

postgresql:
  enabled: true
  nameOverride: "sonarqube-postgres"
  auth:
    existingSecret: "sonarqube-postgres-auth"
    username: bn_sonarqube
    database: bitnami_sonarqube
  primary:
    service:
      ports:
        postgresql: 5432
    persistence:
      enabled: true
      existingClaim: ""
      storageClass: "default"
      accessMode: ReadWriteOnce
      size: 2Gi
